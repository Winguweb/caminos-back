@mixin map-references() {
  height: 100%;
  > div {
    border-radius: 8px;
    height: 100%;
    min-height: 400px;
    overflow: hidden;
  }
  .leaflet-tile-pane {
    opacity: 0.6;
  }
  .leaflet-shadow-pane {
    opacity: 0.2;
  }
  .leaflet-marker-icon {
    background-color: transparent;
    border: none;
  }
  .geometry-marker,
  .geometry-polygon,
  .geometry-polyline {
    &.water {stroke: $water;}
    &.trash {stroke: $trash;}
    &.public {stroke: $public;}
    &.health {stroke: $health;}
    &.energy {stroke: $energy;}
    &.sewer {stroke: $sewer;}
    &.infrastructure {stroke: $infrastructure;}
  }
  .geometry-polygon {
    &.water {fill: $water;}
    &.trash {fill: $trash;}
    &.public {fill: $public;}
    &.health {fill: $health;}
    &.energy {fill: $energy;}
    &.sewer {fill: $sewer;}
    &.infrastructure {fill: $infrastructure;}
    &.base-geometry {
      fill: transparent;
      stroke: color($blue, 0.7);
      stroke-dasharray: 5 2;
      stroke-width: 1px;
    }
  }
  p.marker-name {
    @include transform(translate3d(calc(-50% - 7px), -50%, 0));
    @include background-color($white, 0.65);
    @include type-setting(-1);
    border-radius: 2px;
    box-shadow: 8px 0 4px -4px color($light-shadow, 0.1);
    left: 50%;
    line-height: 24px;
    padding: $vgutter/4 $gutter/2;
    position: absolute;
    top: calc(#{$gutter*2} - #{$border});
    white-space: nowrap;
    &.unurbanized {
      display: none;
      left: calc(50% + 4px);
      top: calc(#{$gutter*1.5} - #{$border});
    }
  }
  p.reference-marker {
    border: $border solid $blue;
    border-radius: 100%;
    box-sizing: content-box;
    display: inline-block;
    height: $outer-diameter;
    margin: $gutter;
    margin: 0;
    position: absolute;
    vertical-align: middle;
    width: $outer-diameter;
    @include transform(translate3d(-50%, -50%, 0));
    &::before {
      background-color: $blue;
      border-radius: 100%;
      content: '';
      display: block;
      height: $inner-diameter;
      left: #{($outer-diameter - $inner-diameter)/2};
      position: relative;
      top: #{($outer-diameter - $inner-diameter)/2};
      width: $inner-diameter;
    }
    > span {
      @include transform(translate3d(-50%, -50%, 0));
      @include text-color($white, 1);
      font-weight: bold;
      left: 50%;
      position: absolute;
      top: 50%;
    }
    &.unurbanized {
      border: none;
      height: $gutter/1.5;
      width: $gutter/1.5;
      &::before {
        background-color: transparent;
        border: 2px solid color($blue);
        height: 100%;
        width: 100%;
      }
      > span {
        display: none;
      }
    }
  }
}

.map-references-cell{
  @include map-references();
}
